---
import Navigation from '../components/Navigation.astro';
import '../styles/global.css';

export interface Props {
	title: string;
	description?: string;
	image?: string;
}

const { title, description = "Join us for the wedding celebration of John & Jane", image = "/og-image.jpg" } = Astro.props;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<link rel="canonical" href={canonicalURL} />
		
		<!-- Open Graph / Facebook -->
		<meta property="og:type" content="website" />
		<meta property="og:url" content={Astro.url} />
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:image" content={new URL(image, Astro.url)} />
		
		<!-- Twitter -->
		<meta property="twitter:card" content="summary_large_image" />
		<meta property="twitter:url" content={Astro.url} />
		<meta property="twitter:title" content={title} />
		<meta property="twitter:description" content={description} />
		<meta property="twitter:image" content={new URL(image, Astro.url)} />
		
		<!-- Preload fonts -->
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		
		<!-- PWA Meta Tags -->
		<meta name="theme-color" content="#d4af37" />
		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="default" />
		<meta name="apple-mobile-web-app-title" content="John & Jane Wedding" />
		<link rel="apple-touch-icon" href="/apple-touch-icon.png" />
		<link rel="manifest" href="/manifest.json" />
	</head>
	<body class="antialiased">
		<Navigation />
		<main>
			<slot />
		</main>
		<script>
			// Enhanced animation observer
			const observeElements = () => {
				const observer = new IntersectionObserver((entries) => {
					entries.forEach(entry => {
						if (entry.isIntersecting) {
							entry.target.classList.add('visible');
						}
					});
				}, {
					threshold: 0.1,
					rootMargin: '0px 0px -100px 0px'
				});

				// Observe all animation classes
				const animationSelectors = ['.fade-in', '.slide-in-left', '.slide-in-right'];
				animationSelectors.forEach(selector => {
					document.querySelectorAll(selector).forEach(el => {
						observer.observe(el);
					});
				});
			};

			// Enhanced smooth scrolling with offset for fixed navigation
			const setupSmoothScrolling = () => {
				document.querySelectorAll('a[href^="#"]').forEach(anchor => {
					anchor.addEventListener('click', function (e) {
						e.preventDefault();
						const target = document.querySelector(this.getAttribute('href'));
						if (target) {
							const offsetTop = target.offsetTop - 80; // Account for fixed nav
							window.scrollTo({
								top: offsetTop,
								behavior: 'smooth'
							});
						}
					});
				});
			};

			document.addEventListener('DOMContentLoaded', () => {
				observeElements();
				setupSmoothScrolling();
			});
		</script>
	</body>
</html>
